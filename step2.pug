doctype html
head
	title three.js WebGL - MDDLoader EX
	meta(charset='UTF-8')
	meta(name='viewport' content='width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0')
	link(type='text/css' rel='stylesheet' href='main.css')
body
	#info
		a(href='https://threejs.org' target='_blank' rel='noopener') three.js
		|  - MDDLoader
    script(type='module').
    import * as THREE from '../build/three.module.js';
    import { MDDLoader } from './jsm/loaders/MDDLoader.js';
    let camera, scene, renderer, mixer, clock;
    init();
    function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 0.1, 100 );
        camera.position.set( 8, 8, 8 );
        camera.lookAt( scene.position );
        clock = new THREE.Clock();
        //
        const loader = new MDDLoader();
        loader.load( 'models/mdd/cube.mdd', function ( result ) {
        const morphTargets = result.morphTargets;
        const clip = result.clip;
        clip.optimize();
        const geometry = new THREE.BoxBufferGeometry();
        geometry.morphAttributes.position = morphTargets; // apply morph targets
        const material = new THREE.MeshNormalMaterial( { morphTargets: true } );
        const mesh = new THREE.Mesh( geometry, material );
        scene.add( mesh );
        mixer = new THREE.AnimationMixer( mesh );
        mixer.clipAction( clip ).play(); // use clip
        animate();
    });
    //
    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    
    document.body.appendChild( renderer.domElement );
    window.addEventListener( 'resize', onWindowResize, false );
    
    }
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }
    function animate() {
        requestAnimationFrame( animate );
        const delta = clock.getDelta();
        if ( mixer ) {
            mixer.update( delta );
        }
        renderer.render( scene, camera );
    }
